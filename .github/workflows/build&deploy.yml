name: Build, Package, and Deploy Spring Boot App with Docker

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write # Google Cloud 인증을 위한 권한

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4 # 최신 버전 사용

      - name: Set up JDK 21
        uses: actions/setup-java@v4 # 최신 버전 사용
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: gradle # Gradle 캐싱 활성화로 빌드 속도 향상

      - name: Decode and write application.yml
        run: |
          mkdir -p src/main/resources
          echo "${{ secrets.APPLICATION_YML }}" | base64 --decode > src/main/resources/application.yml

      - name: Decode and write application-prod.yml
        run: |
          mkdir -p src/main/resources
          echo "${{ secrets.APPLICATION_PROD_YML }}" | base64 --decode > src/main/resources/application-prod.yml

      - name: Decode and write jwt.yml
        run: |
          mkdir -p src/main/resources
          echo "${{ secrets.APPLICATION_JWT }}" | base64 --decode > src/main/resources/jwt.yml

      - name: Grant execute permission to gradlew
        run: chmod +x ./gradlew

      - name: Build with Gradle
        run: ./gradlew clean build -x test # 테스트 건너뛰고 빌드 (필요에 따라 제거)

      - name: Build Docker Image
        run: |
          echo "Building Docker image..."
          DOCKER_REGISTRY="${{ secrets.ARTIFACT_REGISTRY_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT }}/${{ secrets.ARTIFACT_REGISTRY_NAME }}"
          docker build -t "$DOCKER_REGISTRY/ai-interview:${{ github.sha }}" .

      - name: Configure Google Cloud CLI
        uses: google-github-actions/setup-gcloud@v2 # 최신 방식의 Google Cloud CLI 설정
        with:
          project_id: ${{ secrets.GCP_PROJECT }}
          credentials: ${{ secrets.GCP_SA_KEY }} # 서비스 계정 키 직접 사용

      - name: Log in to Google Container Registry
        run: |
          echo "Authenticating with Google Cloud..."
          gcloud auth configure-docker --quiet

      - name: Check gcloud Auth
        run: gcloud auth list

      - name: Push Docker Image to Artifact Registry
        run: |
          
          echo "Pushing Docker image to Artifact Registry..."
          DOCKER_REGISTRY="${{ secrets.ARTIFACT_REGISTRY_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT }}/${{ secrets.ARTIFACT_REGISTRY_NAME }}"
          docker push "$DOCKER_REGISTRY/ai-interview:${{ github.sha }}"

      - name: SSH into Compute Engine and deploy Docker container
        run: |
          echo "SSH into Compute Engine and deploy Docker container..."
          DOCKER_REGISTRY="${{ secrets.ARTIFACT_REGISTRY_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT }}/${{ secrets.ARTIFACT_REGISTRY_NAME }}"
          gcloud compute ssh ${{ secrets.GCE_USER }}@${{ secrets.GCE_INSTANCE_IP }} --project ${{ secrets.GCP_PROJECT }} --zone ${{ secrets.GCE_ZONE }} --command "
            docker pull \"$DOCKER_REGISTRY/ai-interview:${{ github.sha }}\" &&
            docker stop ai-interview || true && # 컨테이너가 없으면 에러 무시
            docker rm ai-interview || true &&   # 컨테이너가 없으면 에러 무시
            docker run -d -p 8080:8080 --name ai-interview \"$DOCKER_REGISTRY/ai-interview:${{ github.sha }}\"
          "